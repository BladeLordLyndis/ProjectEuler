Project Euler



1.
have a hashmap m
for 3 and 5
  while each multiple x is not greater than 1000
    put x in m
sum all x in m

==========

2.
while fibonacci term t is less than 4 million
if t is even
  add t to sum 
compute the next fibonacci term t
return t

==========

3.
create an array a of up to size sqrt(n) since this is the largest possible factor
for x = 2 until sqrt(n)
  if x is not marked
    while x * m <= sqrt(n)
      mark index x * m in a as a composite number
for each x in a
  if x is not marked
    add x to sum

----------

instead of using an array, use a hash table

==========

4.
find largest possible value l for the number of digits d * 2
find largest palindrome x less than or equal to l
for each palindrome p in decreasing value from x
  for n = largest d digit number to smallest d digit number
    if p mod n == 0
      return p
    else if p mod n > largest d digit number
      break

==========

5.
l = largest divisor
m = multiple
p = l * m
while solution not found
  solution found = true;
  for x = l to 2
    if p % x != 0
      solution found = false;
  m++
  p = l * m
return p

==========

6.
l = largest number
for x = 1 to l
  s = x * x
  sumProds += s
  sum += x
sum *= sum
return sumProds - sum

==========

7.
n = nth prime to find
limit = (n - 2) * 12
m = boolean array of numbers not prime of size limit
for x = 2 until < limit
  for all multiple of x <= limit
    set the corresponding location to true
search m until the nth prime is found















